>>> a = dict(one=1, two=2, three=3)
>>> b = {'one': 1, 'two': 2, 'three': 3}
>>> c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))
>>> d = dict([('two', 2), ('one', 1), ('three', 3)])
>>> e = dict({'three': 3, 'one': 1, 'two': 2})
>>> f = dict({('three', 3), ('one', 1), ('two', 2)})
都是创建字典

Q:成员资格操作符（in和not in）可以检查一个元素是否存在序列中，当然也可以用来检查一个键（Key）是否存在字典中，那么请问哪种的检查效率更高些？为什么？

答：在字典中检查键（Key）是否存在比在序列中检查指定元素是否存在更高效。
因为字典的原理是使用哈希算法存储，一步到位，不需要使用查找算法进行匹配，因此时间复杂度是O（1），效率非常高。
（关于如何使用哈希算法存储的具体原理可以参考第3题的“扩展阅读”部分）
http://bbs.fishc.org/thread-45016-1-1.html

Q3:
Python对键的要求相对要严格一些，要求它们必须是可哈希（Hash）的对象，不能是可变类型（包括变量、列表、字典本身等）。
但是Python对值是没有任何限制的，它们可以是任意的Python对象。
