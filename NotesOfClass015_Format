"{0} love {1}, {2}".format("I","doffe","memeda")

format 有两个参数：位置参数与关键字参数
位置用花括号，默认{0}，{1}，{2}

或者也可以这么写：
即关键字参数
"{a} love {b}, {c}".format(a = "I" , b = "doffe" , c = "memeda")

复合使用方法：
"{0} love {b}, {c}".format("I" , b = "doffe" , c = "memeda")
注意！数字们一定要带关键字参数之前

打印特殊的字用转义就可以，这里边好像是用{}来转义

冒号代表格式化符号的开始，后边开始接符号格式化
“{0:.1f}{1}”.format(1.234,"GB")
.1代表四舍五入一位小数，f代表打印定点数，类似于浮点数
"{0:.1f}{1}".format(1.234,"GB")
Out[32]: '1.2GB'

比较详细的一个小版本：
http://bbs.fishc.org/forum.php?mod=viewthread&tid=92997&extra=page%3D1%26filter%3Dtypeid%26typeid%3D403

当%遇到字符串，会自动变，把后边的东西忍不住格式化
比如%c 格式化字符以及其ASCII码

'%c' % 97 --> a

python支持元组与字典的输入形式（多输入）

%c 格式化字符及其 ASCII 码
'%c %c %c' % (97,98,99)
强行格式化后边的东西，把它当成ASCII码格回来

%s 格式化字符串
'%s' % 'doffe is handsome'
把后边的内容通过百分号替代到前边

%d 格式化整数
'%d + %d = %d' % (4,5,4+5)
'4 + 5 = 9'
第三个%把（4+5）折腾成整数输出了

%o 格式化无符号8进制数
'%o + %o = %o' % (2121,222,7)
把后边的东西一个个吃进来，然后按照前边的东东表示

%X 大写，十六进制
'%X + %X = %X' % (2121,222,7)

%f 格式化到浮点数，默认长度6位
%e 科学计数法
%g 根据值的大小决定使用%f还是%e

格式化操作辅助命令
m.n m最小总宽度（酱油），n小数点后的位数
'%.1f' % 27.6582
'%5.1f' % 27.582 -->' 27.7'(注意那俩空格)
'%.2e' % 27.6582
负号：左对齐（默认是右对齐）
正号：数字加+-
'%-5.1f' % 27.582
Out[48]: '27.6 '

#：在八进制前显示0，在八进制数前面显示 '0o'，在十六进制数前面显示 '0x' 或 '0X'

0:0取代空格，但是左对齐的话他不会给你右边补0

转义字符：那一大堆。。。
